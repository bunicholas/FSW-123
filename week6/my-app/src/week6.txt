useContext is a basic hook in the API Reference that accepts an object that returns value for that context. the current value is declared by the nearest prop using <MyContext.Provider> above the calling component in the component tree. This is the correct way to useContext. When the nearest <MyContext.Provider> above all the updated component in that context. The hook will fire a rerender with the latest context passes into that MyContext provider. Even if a ancestor uses the React.memo or componentUpdate, rerender will still be fired starting at the component's useContext.
useReducer is another basic hook that passes in both a state and a action into a new state and returns the current state paired with a dispatch method. useReducer is similar to useState when you have a complex state logic that involves several sub-values or when the next state depends on the previous one. useReducer also lets you optimize the performance for the components that trigger deep updates because you can pass a dispatch down instead of using call backs.